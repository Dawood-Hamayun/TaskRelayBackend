// backend/src/prisma/schema.prisma - Enhanced with avatar field
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  password        String
  name            String?
  avatar          String?           @db.Text  // ‚Üê IMPORTANT: Use @db.Text for PostgreSQL to allow large strings
  members         Member[]
  comments        Comment[]
  sentInvites     Invite[]          @relation("SentInvites")
  createdMeetings Meeting[]         @relation("CreatedMeetings")
  meetingAttendees MeetingAttendee[]
  createdAt       DateTime          @default(now())
  updatedAt DateTime @default(now())
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  members     Member[]
  tasks       Task[]
  meetings    Meeting[]
  tags        Tag[]
  invites     Invite[]
  createdAt   DateTime  @default(now())
  updatedAt DateTime @default(now())

}

model Member {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId     String
  project       Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role          Role       @default(MEMBER)
  tasksAssigned Task[]     @relation("AssignedTasks")
  subtasksAssigned Subtask[] @relation("AssignedSubtasks")
  createdAt     DateTime   @default(now())

  @@unique([userId, projectId])
}

model Task {
  id            String    @id @default(cuid())
  projectId     String
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  title         String
  description   String
  priority      TaskPriority @default(MEDIUM)
  status        TaskStatus   @default(TODO)
  dueDate       DateTime?

  assigneeId    String?
  assignee      Member?   @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)

  subtasks      Subtask[]
  comments      Comment[]
  attachments   Attachment[]
  tags          TaskTag[]
  createdAt     DateTime  @default(now())
  updatedAt DateTime @default(now())
}

model Subtask {
  id         String   @id @default(cuid())
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  title      String
  completed  Boolean  @default(false)
  
  assigneeId String?
  assignee   Member?  @relation("AssignedSubtasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  fileName  String
  fileSize  Int?
  mimeType  String?
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Meeting {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  datetime    DateTime
  duration    Int      @default(60)
  location    String?
  meetingUrl  String?
  
  createdBy   String
  creator     User     @relation("CreatedMeetings", fields: [createdBy], references: [id], onDelete: Cascade)
  
  attendees   MeetingAttendee[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId, datetime])
  @@index([createdBy])
}

model MeetingAttendee {
  id        String         @id @default(cuid())
  meetingId String
  meeting   Meeting        @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    AttendeeStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([meetingId, userId])
  @@index([userId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskTags  TaskTag[]
  createdAt DateTime @default(now())

  @@unique([name, projectId])
}

model TaskTag {
  taskId String
  tagId  String
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
}

model Invite {
  id         String      @id @default(cuid())
  email      String
  projectId  String
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role       Role        @default(MEMBER)
  token      String      @unique
  status     InviteStatus @default(PENDING)
  invitedBy  String
  inviter    User        @relation("SentInvites", fields: [invitedBy], references: [id], onDelete: Cascade)
  message    String?
  expiresAt  DateTime
  createdAt  DateTime    @default(now())

  @@index([token])
  @@index([email])
  @@index([projectId])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BACKLOG
}

enum InviteStatus {
  PENDING
  ACCEPTED  
  DECLINED
  EXPIRED
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}